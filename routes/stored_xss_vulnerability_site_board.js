const express = require('express');
const { Sequelize, DataTypes } = require('sequelize');
const path = require('path');

// Sequelize 설정
const sequelize = new Sequelize('mysql://root:root@localhost:3306/vuln_site'); // 여기를 자신의 MySQL 연결 정보로 수정하세요.

// 데이터베이스 모델 정의
const Board = sequelize.define('Board', {
  title: DataTypes.STRING,
  content: DataTypes.TEXT,
}, {
  tableName: 'board', // MySQL에서 사용할 테이블 이름
  timestamps: false,
});

const router = express.Router();

router.use(express.urlencoded({ extended: true }));

// 모든 게시글 가져오기
router.get('/', async (req, res) => {
    try {
        const posts = await Board.findAll({
            attributes: ['id', 'title']
        });
        res.render('stored_xss_vulnerability_site_board_list', { posts });
    } catch (err) {
        res.status(500).send('Server Error');
    }
});

// 게시글 작성 페이지
router.get('/write', (req, res) => {
    res.render('stored_xss_vulnerability_site_board_write');
});

// 게시글 작성
router.post('/write', async (req, res) => {
    try {
        const { title, content } = req.body;
        const post = await Board.create({ title, content });
        res.redirect('/stored_xss/board/' + post.id);
    } catch (err) {
        res.status(500).send('Server Error');
    }
});

// 특정 게시글 가져오기
router.get('/:id', async (req, res) => {
    try {
        const postId = req.params.id;
        const post = await Board.findOne({
            where: { id: postId },
            attributes: ['title', 'content']
        });
        if (post) {
            res.render('stored_xss_vulnerability_site_board_post', { post });
        } else {
            res.status(404).send('Post not found');
        }
    } catch (err) {
        res.status(500).send('Server Error');
    }
});

module.exports = router;
